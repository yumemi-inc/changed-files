name: 'Changed Files with filter'
description: 'A GitHub Action that outputs a list of changed files in a pull request.'
author: 'YUMEMI Inc.'
branding:
  icon: 'file'
  color: 'blue'
inputs:
  separator:
    description: 'Separator between file names in plain format.'
    required: false
    default: ' '
  format:
    description: 'Output format for list of file names. Either plain or json.'
    required: false
    default: 'plain'
  patterns:
    description: 'Path pattern to filter. See README for details.'
    required: false
  statuses:
    description: 'Status of pull request files to include from output. Specify added, modified, renamed, and removed separately.'
    required: false
  exclude-statuses:
    description: 'Status of pull request files to exclude from output. Specify added, modified, renamed, and removed separately.'
    required: false
  run-if-exists:
    description: 'Bash script to run if at least one file exists after filtering.'
    required: false
  head-ref:
    description: ''
    required: false
    default: ${{ github.sha }}
  base-ref:
    description: ''
    required: false
    default: ${{ github.event_name == 'push' && github.event.before || '' }}
outputs:
  files:
    description: 'List of file names after filtering.'
    value: ${{ steps.result.outputs.exists != null && (inputs.format == 'json' && steps.result.outputs.files || join(fromJSON(steps.result.outputs.files), inputs.separator)) || '' }}
  exists:
    description: 'Whether at least one file exists after filtering.'
    value: ${{ steps.result.outputs.exists }}
  additions:
    description: 'Total additions after filtering.'
    value: ${{ steps.result.outputs.additions }}
  deletions:
    description: 'Total deletions after filtering.'
    value: ${{ steps.result.outputs.deletions }}
  changes:
    description: 'Total changes after filtering.'
    value: ${{ steps.result.outputs.changes }}
runs:
  using: 'composite'
  steps:
    - name: Prepare
      id: prepare
      shell: bash
      env:
        PATTERNS: ${{ inputs.patterns }}
        STATUSES: ${{ inputs.statuses }}
        EXC_STATUSES: ${{ inputs.exclude-statuses }}
        IS_VALID_FORMAT: ${{ inputs.format != null && contains(fromJSON('["plain","json"]'), inputs.format) }}
        HEAD_REF: ${{ inputs.head-ref }}
        BASE_REF: ${{ inputs.base-ref }}
        GH_REPO: ${{ github.repository }} # for GitHub CLI
        GH_TOKEN: ${{ github.token }} # for GitHub CLI
      run: |
        echo "::debug::gh version: $(gh --version | tr '\n' ' ')"
        echo "::debug::jq version: $(jq --version)"

        source "$GITHUB_ACTION_PATH/raise_error.sh"

        patterns="$("$GITHUB_ACTION_PATH/get_multiline_input.sh" "$PATTERNS")"

        statuses=$("$GITHUB_ACTION_PATH/get_statuses.sh" "$STATUSES") > /dev/null 2>&1 || raise_error "'statuses' input can be used added, modified, renamed and removed."
        exc_statuses=$("$GITHUB_ACTION_PATH/get_statuses.sh" "$EXC_STATUSES") > /dev/null 2>&1 || raise_error "'exclude-statuses' input can be used added, modified, renamed and removed."

        if [ "$IS_VALID_FORMAT" != 'true' ]; then raise_error "'format' input must be plain or json."; fi

        if [ -z "$HEAD_REF" ]; then raise_error "Specify 'head-ref' input."; fi

        # have pemisson?
        gh api repos/{owner}/{repo}/branches --silent > /dev/null 2>&1 || raise_error "May not have 'contents: read' permission."
          
        if [ -z "$BASE_REF" ]; then
          files="$(gh api "repos/{owner}/{repo}/commits/$HEAD_REF" | jq -c '[.files[]|{ filename, status, additions, deletions, changes }]')" \
            > /dev/null 2>&1 || raise_error "'head-ref' input is not valid."
        else
          files="$(gh api "repos/{owner}/{repo}/compare/${BASE_REF}...${HEAD_REF}" | jq -c '[.files[]|{ filename, status, additions, deletions, changes }]')" \
            > /dev/null 2>&1 || raise_error "'head-ref' input or 'base-ref' input is not valid."
        fi

        {
          echo "patterns=$patterns"; echo "statuses=$statuses"; echo "exc-statuses=$exc_statuses"; echo "files=$files"
        } >> "$GITHUB_OUTPUT"
    - name: Filter files
      id: filter
      uses: actions/github-script@v6
      env:
        FILES: ${{ steps.prepare.outputs.files }}
        PATTERNS: ${{ steps.prepare.outputs.patterns }}
        STATUSES: ${{ steps.prepare.outputs.statuses }}
        EXC_STATUSES: ${{ steps.prepare.outputs.exc-statuses }}
      with:
        script: |
          const { GITHUB_ACTION_PATH, FILES, PATTERNS, STATUSES, EXC_STATUSES } = process.env;
          const minimatch = require(`${GITHUB_ACTION_PATH}/dist/index.js`)
          const files = JSON.parse(FILES), patterns = JSON.parse(PATTERNS), statuses = JSON.parse(STATUSES), excStatuses = JSON.parse(EXC_STATUSES);
          const incPatterns = patterns.filter(p => !p.startsWith('!'));
          const excPatterns = patterns.filter(p => p.startsWith('!')).map(p => p.slice(1));
          const option = { dot: true, nocomment: true, nonegate: true, noext: true };
          return files.filter(f => incPatterns.length === 0 || incPatterns.some(p => minimatch(f.filename, p, option)))
            .filter(f => !excPatterns.some(p => minimatch(f.filename, p, option)))
            .filter(f => statuses.length === 0 || statuses.some(s => f.status === s))
            .filter(f => !excStatuses.some(s => f.status === s));
    - name: Output results
      id: result
      shell: bash
      env:
        FILES: ${{ steps.filter.outputs.result }}
      run: |
        {
          if [ "$FILES" != '[]' ]; then
            echo "files=$(echo "$FILES" | jq -c '[.[].filename]')"
            echo 'exists=true'
            echo "additions=$(echo "$FILES" | jq '[.[].additions]|add')"
            echo "deletions=$(echo "$FILES" | jq '[.[].deletions]|add')"
            echo "changes=$(echo "$FILES" | jq '[.[].changes]|add')"
          else
            echo 'files=[]'; echo 'exists=false'; echo 'additions=0'; echo 'deletions=0'; echo 'changes=0'
          fi
        } >> "$GITHUB_OUTPUT"
    - name: Run script
      if: steps.result.outputs.exists == 'true' && inputs.run-if-exists != null
      shell: bash
      run: |
        ${{ inputs.run-if-exists }}
